{"ast":null,"code":"// manageNotification.mjs\nimport express from 'express';\nimport { MongoClient, ObjectId } from 'mongodb';\nimport dotenv from 'dotenv';\n\n// Load environment variables from .env file\ndotenv.config();\nconst app = express();\nconst port = 3001;\nconst uri = process.env.ATLAS_URL; // Use the connection string from the .env file\nconst client = new MongoClient(uri);\napp.use(express.json());\napp.get('/notifications', async (req, res) => {\n  const {\n    username\n  } = req.query;\n  try {\n    await client.connect();\n    const database = client.db('your_database_name'); // Replace with your database name\n    const notifications = database.collection('notifications');\n    const userNotifications = await notifications.find({\n      username\n    }).toArray();\n    res.status(200).json(userNotifications);\n  } catch (error) {\n    res.status(500).json({\n      error: 'Failed to fetch notifications'\n    });\n  } finally {\n    await client.close();\n  }\n});\napp.put('/notifications/:id/read', async (req, res) => {\n  const {\n    id\n  } = req.params;\n  try {\n    await client.connect();\n    const database = client.db('your_database_name'); // Replace with your database name\n    const notifications = database.collection('notifications');\n    await notifications.updateOne({\n      _id: new ObjectId(id)\n    }, {\n      $set: {\n        read: true\n      }\n    });\n    res.status(200).json({\n      message: 'Notification marked as read'\n    });\n  } catch (error) {\n    res.status(500).json({\n      error: 'Failed to mark notification as read'\n    });\n  } finally {\n    await client.close();\n  }\n});\napp.listen(port, () => {\n  console.log(`Notification service running at http://localhost:${port}`);\n});","map":{"version":3,"names":["express","MongoClient","ObjectId","dotenv","config","app","port","uri","process","env","ATLAS_URL","client","use","json","get","req","res","username","query","connect","database","db","notifications","collection","userNotifications","find","toArray","status","error","close","put","id","params","updateOne","_id","$set","read","message","listen","console","log"],"sources":["C:/Users/vicky/OneDrive - ADvTECH Ltd/Varsity college/Third Year/Second Semester/APDS7311/POE/2/Main/APDS_POE/FRONT END/frontend/src/components/NotificationPage.js"],"sourcesContent":["// manageNotification.mjs\r\nimport express from 'express';\r\nimport { MongoClient, ObjectId } from 'mongodb';\r\nimport dotenv from 'dotenv';\r\n\r\n// Load environment variables from .env file\r\ndotenv.config();\r\n\r\nconst app = express();\r\nconst port = 3001;\r\nconst uri = process.env.ATLAS_URL; // Use the connection string from the .env file\r\nconst client = new MongoClient(uri);\r\n\r\napp.use(express.json());\r\n\r\napp.get('/notifications', async (req, res) => {\r\n  const { username } = req.query;\r\n  try {\r\n    await client.connect();\r\n    const database = client.db('your_database_name'); // Replace with your database name\r\n    const notifications = database.collection('notifications');\r\n    const userNotifications = await notifications.find({ username }).toArray();\r\n    res.status(200).json(userNotifications);\r\n  } catch (error) {\r\n    res.status(500).json({ error: 'Failed to fetch notifications' });\r\n  } finally {\r\n    await client.close();\r\n  }\r\n});\r\n\r\napp.put('/notifications/:id/read', async (req, res) => {\r\n  const { id } = req.params;\r\n  try {\r\n    await client.connect();\r\n    const database = client.db('your_database_name'); // Replace with your database name\r\n    const notifications = database.collection('notifications');\r\n    await notifications.updateOne({ _id: new ObjectId(id) }, { $set: { read: true } });\r\n    res.status(200).json({ message: 'Notification marked as read' });\r\n  } catch (error) {\r\n    res.status(500).json({ error: 'Failed to mark notification as read' });\r\n  } finally {\r\n    await client.close();\r\n  }\r\n});\r\n\r\napp.listen(port, () => {\r\n  console.log(`Notification service running at http://localhost:${port}`);\r\n});"],"mappings":"AAAA;AACA,OAAOA,OAAO,MAAM,SAAS;AAC7B,SAASC,WAAW,EAAEC,QAAQ,QAAQ,SAAS;AAC/C,OAAOC,MAAM,MAAM,QAAQ;;AAE3B;AACAA,MAAM,CAACC,MAAM,CAAC,CAAC;AAEf,MAAMC,GAAG,GAAGL,OAAO,CAAC,CAAC;AACrB,MAAMM,IAAI,GAAG,IAAI;AACjB,MAAMC,GAAG,GAAGC,OAAO,CAACC,GAAG,CAACC,SAAS,CAAC,CAAC;AACnC,MAAMC,MAAM,GAAG,IAAIV,WAAW,CAACM,GAAG,CAAC;AAEnCF,GAAG,CAACO,GAAG,CAACZ,OAAO,CAACa,IAAI,CAAC,CAAC,CAAC;AAEvBR,GAAG,CAACS,GAAG,CAAC,gBAAgB,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAC5C,MAAM;IAAEC;EAAS,CAAC,GAAGF,GAAG,CAACG,KAAK;EAC9B,IAAI;IACF,MAAMP,MAAM,CAACQ,OAAO,CAAC,CAAC;IACtB,MAAMC,QAAQ,GAAGT,MAAM,CAACU,EAAE,CAAC,oBAAoB,CAAC,CAAC,CAAC;IAClD,MAAMC,aAAa,GAAGF,QAAQ,CAACG,UAAU,CAAC,eAAe,CAAC;IAC1D,MAAMC,iBAAiB,GAAG,MAAMF,aAAa,CAACG,IAAI,CAAC;MAAER;IAAS,CAAC,CAAC,CAACS,OAAO,CAAC,CAAC;IAC1EV,GAAG,CAACW,MAAM,CAAC,GAAG,CAAC,CAACd,IAAI,CAACW,iBAAiB,CAAC;EACzC,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdZ,GAAG,CAACW,MAAM,CAAC,GAAG,CAAC,CAACd,IAAI,CAAC;MAAEe,KAAK,EAAE;IAAgC,CAAC,CAAC;EAClE,CAAC,SAAS;IACR,MAAMjB,MAAM,CAACkB,KAAK,CAAC,CAAC;EACtB;AACF,CAAC,CAAC;AAEFxB,GAAG,CAACyB,GAAG,CAAC,yBAAyB,EAAE,OAAOf,GAAG,EAAEC,GAAG,KAAK;EACrD,MAAM;IAAEe;EAAG,CAAC,GAAGhB,GAAG,CAACiB,MAAM;EACzB,IAAI;IACF,MAAMrB,MAAM,CAACQ,OAAO,CAAC,CAAC;IACtB,MAAMC,QAAQ,GAAGT,MAAM,CAACU,EAAE,CAAC,oBAAoB,CAAC,CAAC,CAAC;IAClD,MAAMC,aAAa,GAAGF,QAAQ,CAACG,UAAU,CAAC,eAAe,CAAC;IAC1D,MAAMD,aAAa,CAACW,SAAS,CAAC;MAAEC,GAAG,EAAE,IAAIhC,QAAQ,CAAC6B,EAAE;IAAE,CAAC,EAAE;MAAEI,IAAI,EAAE;QAAEC,IAAI,EAAE;MAAK;IAAE,CAAC,CAAC;IAClFpB,GAAG,CAACW,MAAM,CAAC,GAAG,CAAC,CAACd,IAAI,CAAC;MAAEwB,OAAO,EAAE;IAA8B,CAAC,CAAC;EAClE,CAAC,CAAC,OAAOT,KAAK,EAAE;IACdZ,GAAG,CAACW,MAAM,CAAC,GAAG,CAAC,CAACd,IAAI,CAAC;MAAEe,KAAK,EAAE;IAAsC,CAAC,CAAC;EACxE,CAAC,SAAS;IACR,MAAMjB,MAAM,CAACkB,KAAK,CAAC,CAAC;EACtB;AACF,CAAC,CAAC;AAEFxB,GAAG,CAACiC,MAAM,CAAChC,IAAI,EAAE,MAAM;EACrBiC,OAAO,CAACC,GAAG,CAAC,oDAAoDlC,IAAI,EAAE,CAAC;AACzE,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}